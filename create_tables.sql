--TABLES

-- DROP TABLES section
DROP TABLE IF EXISTS PLAYER_INVENTORY;
DROP TABLE IF EXISTS MERCHANT_INVENTORY;
DROP TABLE IF EXISTS HEROES_JOURNEY;
DROP TABLE IF EXISTS SAVE_SNAPSHOTS;
DROP TABLE IF EXISTS PLAYER_SPELLS;
DROP TABLE IF EXISTS MONSTER_SPELLS;
DROP TABLE IF EXISTS PLAYER_INFO;
DROP TABLE IF EXISTS PLAYER_LEVELS;
DROP TABLE IF EXISTS MONSTER_LOCATIONS;
DROP TABLE IF EXISTS MINIONS;
DROP TABLE IF EXISTS BOSSES;
DROP TABLE IF EXISTS MERCHANTS;
DROP TABLE IF EXISTS EQUIPMENT;
DROP TABLE IF EXISTS CONSUMABLES;
DROP TABLE IF EXISTS KEY_ITEMS;
DROP TABLE IF EXISTS LOCATIONS;
DROP TABLE IF EXISTS ITEMS;
DROP TABLE IF EXISTS SPELLS;
DROP TABLE IF EXISTS MONSTERS;


-- Contains items data which merchants buy/sell
CREATE TABLE ITEMS (
  ITEMS_ID 				SERIAL 			NOT NULL,
  ITEM_NAME 			VARCHAR(64) 	NOT NULL,
  ITEM_EFFECT 			VARCHAR(128) 	NOT NULL,
  BUY_PRICE 			BIGINT 			NOT NULL,
  SELL_PRICE 			BIGINT 			NOT NULL,
  IS_USABLE_IN_BATTLE 	BOOLEAN 		NOT NULL,
  PRIMARY KEY (ITEMS_ID)
);

-- subtype of ITEMS (weapons, armor, accessories)
CREATE TABLE EQUIPMENT (
  ITEMS_ID 		BIGINT 			NOT NULL,
  EQUIP_TYPE 	VARCHAR(24) 	NOT NULL,
  EQUIP_SLOT 	VARCHAR(24) 	NOT NULL,
  PRIMARY KEY (ITEMS_ID),
  FOREIGN KEY (ITEMS_ID) REFERENCES ITEMS

);

-- subtype of ITEMS (restorative, status remedies, etc.)
CREATE TABLE CONSUMABLES (
  ITEMS_ID 			BIGINT 			NOT NULL,
  BUFF_LENGTH 		BIGINT 			NOT NULL,
  CURES_CONDITION 	VARCHAR(24) 	NOT NULL,
  PRIMARY KEY (ITEMS_ID),
  FOREIGN KEY (ITEMS_ID) REFERENCES ITEMS
);

-- subtype of ITEMS (special items for story progression)
CREATE TABLE KEY_ITEMS (
  ITEMS_ID 		BIGINT 		NOT NULL,
  IS_KEY_ITEM 	BOOLEAN 	NOT NULL,
  PRIMARY KEY (ITEMS_ID),
  FOREIGN KEY (ITEMS_ID) REFERENCES ITEMS
);

-- Contains info on different game locations
CREATE TABLE LOCATIONS (
  LOCATIONS_ID 	SERIAL 		NOT NULL,
  LOCATION_NAME VARCHAR(64) NOT NULL,
  PRIMARY KEY (LOCATIONS_ID)
);

-- contains information about various merchants in the world
CREATE TABLE MERCHANTS (
  MERCHANT_ID 	SERIAL 			NOT NULL,
  LOCATION_ID 	BIGINT		 	NOT NULL,
  MERCHANT_TYPE	VARCHAR(16) 	NOT NULL,
  PRIMARY KEY (MERCHANT_ID),
  FOREIGN KEY(LOCATION_ID) REFERENCES LOCATIONS
);

-- join table between ITEMS and MERCHANT 
CREATE TABLE MERCHANT_INVENTORY (
  MERCHANT_INVENTORY_ID SERIAL	NOT NULL,
  ITEM_ID 				BIGINT 	NOT NULL,
  MERCHANT_ID 			BIGINT 	NOT NULL,
  PRIMARY KEY (MERCHANT_INVENTORY_ID),
  FOREIGN KEY(ITEM_ID) REFERENCES ITEMS,
  FOREIGN KEY(MERCHANT_ID) REFERENCES MERCHANTS
);


-- contains info about all the monsters the player can encounter in the game
CREATE TABLE MONSTERS (
  MONSTERS_ID 	SERIAL 		NOT NULL,
  MONSTER_NAME 	VARCHAR(32) NOT NULL,
  MONSTER_HP 	BIGINT 		NOT NULL,
  MONSTER_MP 	BIGINT 		NOT NULL,
  MONSTER_STR 	BIGINT 		NOT NULL,
  MONSTER_DEF 	BIGINT 		NOT NULL,
  MONSTER_SPD	BIGINT 		NOT NULL,
  EXPERIENCE 	BIGINT 		NOT NULL,
  GOLD_DROPPED 	BIGINT 		NOT NULL,
  PRIMARY KEY (MONSTERS_ID)
);

-- subtype of MONSTERS, used for normal monsters
CREATE TABLE MINIONS (
  MONSTERS_ID 	BIGINT 	NOT NULL,
  PRIMARY KEY (MONSTERS_ID),
  FOREIGN KEY(MONSTERS_ID) REFERENCES MONSTERS
);

-- subtype of MONSTERS, has special info for boss monsters
CREATE TABLE BOSSES (
  MONSTERS_ID 	BIGINT 	NOT NULL,
  PRIMARY KEY (MONSTERS_ID),
  FOREIGN KEY(MONSTERS_ID) REFERENCES MONSTERS
);

-- join table between MONSTERS and LOCATIONS, 
-- used associate monsters with specific locations
CREATE TABLE MONSTER_LOCATIONS (
  MONSTER_LOCATIONS_ID 	SERIAL 			NOT NULL,
  LOCATIONS_ID 			BIGINT		 	NOT NULL,
  MONSTERS_ID 			BIGINT		 	NOT NULL,
  ENCOUNTER_PERCENTAGE 	DECIMAL(6,2) 	NOT NULL,
  PRIMARY KEY (MONSTER_LOCATIONS_ID),
  FOREIGN KEY(LOCATIONS_ID) REFERENCES LOCATIONS,
  FOREIGN KEY(MONSTERS_ID) REFERENCES MONSTERS
);

-- contains info about SPELLS that are available in the game
CREATE TABLE SPELLS (
  SPELLS_ID 	SERIAL 		NOT NULL,
  SPELL_NAME 	VARCHAR(32) NOT NULL,
  SPELL_EFFECT 	VARCHAR(128) NOT NULL,
  MP_COST 		BIGINT 		NOT NULL,
  PRIMARY KEY (SPELLS_ID)
);


-- join table between MONSTERS and SPELLS,
-- associates specific spells to certain monsters
CREATE TABLE MONSTER_SPELLS (
  SPELLS_ID 		BIGINT 	NOT NULL,
  MONSTERS_ID 		BIGINT 	NOT NULL,
  CHANCE_TO_HIT 	BIGINT	NOT NULL,
  PRIMARY KEY (SPELLS_ID, MONSTERS_ID),
  FOREIGN KEY (SPELLS_ID) REFERENCES SPELLS,
  FOREIGN KEY(MONSTERS_ID) REFERENCES MONSTERS
);

-- contains info on how to increment PLAYER_INFO values on a 'level up'
CREATE TABLE PLAYER_LEVELS (
  PLAYER_LEVELS_ID 	SERIAL 		NOT NULL,
  UNLOCKED_SPELL_ID BIGINT	 	NOT NULL,
  LEVEL 			BIGINT 		NOT NULL,
  EXP_NEEDED		BIGINT		NOT NULL,
  STR_GAIN 			BIGINT 		NOT NULL,
  STR_BASE 			BIGINT 		NOT NULL,
  DEF_GAIN 			BIGINT 		NOT NULL,
  DEF_BASE 			BIGINT 		NOT NULL,
  SPD_GAIN 			BIGINT 		NOT NULL,
  SPD_BASE 			BIGINT 		NOT NULL,
  HP_GAIN 			BIGINT 		NOT NULL,
  HP_BASE 			BIGINT 		NOT NULL,
  MP_GAIN 			BIGINT 		NOT NULL,
  MP_BASE 			BIGINT 		NOT NULL,
  PRIMARY KEY (PLAYER_LEVELS_ID),
  FOREIGN KEY(UNLOCKED_SPELL_ID) REFERENCES SPELLS
);

-- contains all player stat information
CREATE TABLE PLAYER_INFO (
  PLAYER_INFO_ID 	SERIAL 			NOT NULL,
  LOCATION_ID 		BIGINT		 	NOT NULL,
  PLAYER_NAME 		VARCHAR(128) 	NOT NULL,
  PLAYER_LEVELS_ID	BIGINT 			NOT NULL,
  HP_MAX 			BIGINT 			NOT NULL,
  HP_CURRENT 		BIGINT 			NOT NULL,
  MP_MAX 			BIGINT 			NOT NULL,
  MP_CURRENT 		BIGINT 			NOT NULL,
  STR_BASE 			BIGINT 			NOT NULL,
  STR_WITH_EQUIP 	BIGINT 			NOT NULL,
  DEF_BASE 			BIGINT 			NOT NULL,
  DEF_WITH_EQUIP 	BIGINT 			NOT NULL,
  SPD_BASE 			BIGINT 			NOT NULL,
  SPD_WITH_EQUIP 	BIGINT 			NOT NULL,
  TOTAL_EXPERIENCE 	BIGINT 			NOT NULL,
  TOTAL_GOLD 		BIGINT 			NOT NULL,
  PRIMARY KEY (PLAYER_INFO_ID),
  FOREIGN KEY(LOCATION_ID) REFERENCES LOCATIONS,
  FOREIGN KEY(PLAYER_LEVELS_ID) REFERENCES PLAYER_LEVELS
);

-- join table between PLAYER_INFO and SPELLS,
-- contains all spells that player has access to
CREATE TABLE PLAYER_SPELLS (
  SPELLS_ID 		BIGINT 	NOT NULL,
  PLAYER_INFO_ID 	BIGINT 	NOT NULL,
  USABLE_IN_BATTLE 	BOOLEAN NOT NULL,
  PRIMARY KEY (SPELLS_ID,PLAYER_INFO_ID),
  FOREIGN KEY (SPELLS_ID) REFERENCES SPELLS,
  FOREIGN KEY(PLAYER_INFO_ID) REFERENCES PLAYER_INFO
);

-- join table between the PLAYER_INFO and ITEMS, provides player with items to use
CREATE TABLE PLAYER_INVENTORY (
  PLAYER_INVENTORY_ID 	SERIAL		NOT NULL,
  ITEM_ID 				BIGINT	 	NOT NULL,
  PLAYER_INFO_ID 		BIGINT	 	NOT NULL,
  QUANTITY 				BIGINT 		NOT NULL,
  IS_EQUIPPED 			BOOLEAN		NOT NULL,
  PRIMARY KEY (PLAYER_INVENTORY_ID),
  FOREIGN KEY(ITEM_ID) REFERENCES ITEMS,
  FOREIGN KEY(PLAYER_INFO_ID) REFERENCES PLAYER_INFO
);

-- used to load particular data into the game state
CREATE TABLE SAVE_SNAPSHOTS (
  SAVE_SNAPSHOT_ID 	SERIAL	NOT NULL,
  PLAYER_INFO_ID 	BIGINT	NOT NULL,
  DATE_OF_SAVE 		DATE 	NOT NULL,
  PRIMARY KEY (SAVE_SNAPSHOT_ID),
  FOREIGN KEY(PLAYER_INFO_ID) REFERENCES PLAYER_INFO
);

-- associated to SAVE_SNAPSHOTS, contains flags denoting major milestones in the story
CREATE TABLE HEROES_JOURNEY (
  HEROES_JOURNEY_ID 		SERIAL 		NOT NULL,
  SAVE_SNAPSHOT_ID 			BIGINT	 	NOT NULL,
  DEFEATED_GREEN_DRAGON 	BOOLEAN 	NOT NULL,
  DEFEATED_GOLEM 			BOOLEAN 	NOT NULL,
  DEFEATED_DRAGON_LORD 		BOOLEAN 	NOT NULL,
  FOUND_FAERIE_FLUTE 		BOOLEAN 	NOT NULL,
  FOUND_LYRE_OF_IRE 		BOOLEAN 	NOT NULL,
  FOUND_SUNSTONE 			BOOLEAN 	NOT NULL,
  FOUND_STAFF_OF_RAIN 		BOOLEAN 	NOT NULL,
  FOUND_PRINCESS_PLEDGE 	BOOLEAN 	NOT NULL,
  FOUND_MARK_OF_EDRICK 		BOOLEAN 	NOT NULL,
  FOUND_RAINBOW_DROP 		BOOLEAN 	NOT NULL,
  FOUND_SPHERE_OF_LIGHT 	BOOLEAN 	NOT NULL,
  PRIMARY KEY (HEROES_JOURNEY_ID),
  FOREIGN KEY(SAVE_SNAPSHOT_ID) REFERENCES SAVE_SNAPSHOTS
);



---------------------------------------------------------------------------------------------

--SEQUENCES

-- I am utilizing the 'SERIAL' datatype for my primary keys and foreign keys which functions
-- the same as declaring a sequence.


---------------------------------------------------------------------------------------------

-- INDICIES
-- these are used to help increase the performance of my DBMS

DROP INDEX IF EXISTS IX_EQUIPMENT_ITEMS;
DROP INDEX IF EXISTS IX_CONSUMABLES_ITEMS;
DROP INDEX IF EXISTS IX_KEY_ITEMS_ITEMS;
DROP INDEX IF EXISTS IX_MERCHANT_INVENTORY_ITEMS;
DROP INDEX IF EXISTS IX_MERCHANT_INVENTORY_MERCHANT;
DROP INDEX IF EXISTS IX_PLAYER_INFO_LOCATIONS;
DROP INDEX IF EXISTS IX_PLAYER_INVENTORY_ITEMS;
DROP INDEX IF EXISTS IX_PLAYER_INVENTORY_PLAYER_INFO;
DROP INDEX IF EXISTS IX_SAVE_SNAPSHOT_PLAYER_INFO;
DROP INDEX IF EXISTS IX_HEROES_JOURNEY_SAVE_SNAPSHOT;
DROP INDEX IF EXISTS IX_PLAYER_SPELLS_PLAYER_INFO;
DROP INDEX IF EXISTS IX_PLAYER_SPELLS_SPELLS;
DROP INDEX IF EXISTS IX_MONSTER_SPELLS_SPELLS;
DROP INDEX IF EXISTS IX_MONSTER_SPELLS_MONSTERS;
DROP INDEX IF EXISTS IX_PLAYER_LEVELS_SPELLS;
DROP INDEX IF EXISTS IX_MONSTER_LOCATIONS_MONSTERS;

-- indexes created for foreign keys
CREATE INDEX IX_EQUIPMENT_ITEMS ON  EQUIPMENT (ITEMS_ID);
CREATE INDEX IX_CONSUMABLES_ITEMS ON  CONSUMABLES (ITEMS_ID);
CREATE INDEX IX_KEY_ITEMS_ITEMS ON  KEY_ITEMS (ITEMS_ID);
CREATE INDEX IX_MERCHANT_INVENTORY_ITEMS ON  MERCHANT_INVENTORY (ITEM_ID);
CREATE INDEX IX_MERCHANT_INVENTORY_MERCHANT ON  MERCHANT_INVENTORY (MERCHANT_ID);
CREATE INDEX IX_PLAYER_INFO_LOCATIONS ON  PLAYER_INFO (LOCATION_ID);
CREATE INDEX IX_PLAYER_INVENTORY_ITEMS ON  PLAYER_INVENTORY (ITEM_ID);
CREATE INDEX IX_PLAYER_INVENTORY_PLAYER_INFO ON  PLAYER_INVENTORY (PLAYER_INFO_ID);
CREATE INDEX IX_SAVE_SNAPSHOT_PLAYER_INFO ON  SAVE_SNAPSHOTS (PLAYER_INFO_ID);
CREATE INDEX IX_HEROES_JOURNEY_SAVE_SNAPSHOT ON  HEROES_JOURNEY (SAVE_SNAPSHOT_ID);
CREATE INDEX IX_PLAYER_SPELLS_SPELLS ON  PLAYER_SPELLS (SPELLS_ID);
CREATE INDEX IX_MONSTER_SPELLS_SPELLS ON  MONSTER_SPELLS (SPELLS_ID);
CREATE INDEX IX_PLAYER_SPELLS_PLAYER_INFO ON  PLAYER_SPELLS (PLAYER_INFO_ID);
CREATE INDEX IX_MONSTER_SPELLS_MONSTERS ON  MONSTER_SPELLS (MONSTERS_ID);
CREATE INDEX IX_PLAYER_LEVELS_SPELLS ON  PLAYER_LEVELS (UNLOCKED_SPELL_ID);
CREATE INDEX IX_MONSTER_LOCATIONS_MONSTERS ON  MONSTER_LOCATIONS (MONSTERS_ID);


-- indexes created to ease querying and procedures
CREATE INDEX IX_LOCATIONS_NAME ON  LOCATIONS (LOCATION_NAME);
CREATE INDEX IX_MONSTERS_NAME ON  MONSTERS (MONSTER_NAME);
CREATE INDEX IX_PLAYER_INFO_NAME ON  PLAYER_INFO (PLAYER_NAME);
CREATE INDEX IX_MERCHANTS_MERCHANT_TYPE ON  MERCHANTS (MERCHANT_TYPE);
CREATE INDEX IX_ITEMS_NAME ON  ITEMS (ITEM_NAME);
CREATE INDEX IX_SPELLS_NAME ON  SPELLS (SPELL_NAME);

